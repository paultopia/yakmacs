# -*- in-config-file: t -*-

reminder to self: g<tab> unfolds headings, for when you open this file and forget the keybinding.


* Wth?
This is the readme for the github repo where I attempt to make myself a functional emacs configuration from 
naked emacs. It's running on a raspberry pi, with the idea that after I make it sufficiently functional 
(which could be, like, years), then I can just yank spacemacs out and drop this directly in the emacs.d on my mac.

This is also the configuration file itself, because I'm doing fancy org babel literate config stuff.

So, that's cool.

** Conventions

   - I use the tag *dev* for headlines that contain code that might need to be removed in production. 
       - Platform-specific stuff (like the GNU TLS incantation below)
       - Dev-specific stuff, like the snipped I bound to @ below.

   - I use the tag *key* for headlines that contain code with a keybinding in it.  This is for ease of later documentation.
       - At some point I want to create a personal usage manual.

   - I use the tag *breakable* for headlines that contain code that might be mysteriously broken when I move machines. Typically accompanied by a note. 
       - I would really prefer to not have anything with this tag when it's "done"

   - I use the tag *fragile* for headlines containing code with non-obvious or even downright mysterious failure potential, where I made it work with pure guesswork.

   - As much as possible, I try to keep keybindings together rather than with their associated packages.  This might be a mistake?

* Package management

** Make MELPA run

*** Cargo-Cult Incantation  :dev:fragile:

This is an incantation that appears to be required to get MELPA to work. I've got no idea why, but 
it comes from this place: 
https://francopasut.medium.com/emacs-melpa-and-the-failed-to-download-gnu-archive-error-b834bbe4491e

May be platform specific, I should probably try getting rid of this when I move the whole config off 
the raspberry pi where I'm putting this together and onto the mac. (call that production rather than 
development.)  (Or only set it for linux machines?  I saw some snippet somewhere where someone ran some code 
differently depending on the machine they were on.)

#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC


** The rest of the setup for melpa, as copied from evil installation instructions 

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
;; (package-refresh-contents) Maybe things will still work if I comment this out, but with fewer calls?
#+END_SRC

** Use-Package seems necessary

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

*** and I'm sick of putting ensure t in everything

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC


* Browsing and Finding Things 

** Files and such  :fragile: 

Note *IMPORTANT*: this needs to be invoked right after use-package.  When it's further down in the init, it seems to be clobbered 
by some other package, and starts generating weird rgb errors.  I think it has something to do with doom-theme, but 
I also just tried a bare init and then loaded doom theme and this and it's ok somehow.  So somehow 
there might be a three-way conflict between doom-theme this and some other package?  Fuck if I know.  

[[https://github.com/abo-abo/swiper/issues/2748][unholy details here]]

Spacemacs uses helm, but lots of people who start with helm seem to love Ivy

#+BEGIN_SRC emacs-lisp
  (use-package counsel)
  (ivy-mode 1)
#+END_SRC


** Commands

Which-key is apparently The Thing 

#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode)
#+END_SRC


* Evilify everything because emacs keybindings are horrible

** Base evil 

#+BEGIN_SRC emacs-lisp

(use-package evil
  :ensure t ;; install the evil package if not installed
  :init 
  (setq evil-want-keybinding nil))  ;; this is apparently required for evil-collection keybindings.
  (evil-mode)

#+END_SRC

** Add more evil bindings
Let's get as much evilified as humanly possible just to start, eh?

#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t)
(evil-commentary-mode)

(use-package evil-collection
  :ensure t)
(evil-collection-init)

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC


* Visual Fixes

This is going to have to be minimal in dev. I'm using it over terminal, so stuff doesn't work right. 
When I move to prod and GUI, will enhance.

** Theme

This could actually be a bit dicey. I'm working across blink in dark mode on my ipad and iterm with a semi-
light mode on my mac, and I've got no clue if emacs themes will look the same across these different 
terminals and on a GUI interaction. I guess I could VNC into an X session to test this out, but 
that seems like a hassle.  Yolo. 

The doom themes look nice. Ultimately, I want to set a light, low-contrast, theme for writing prose 
(i.e., in markdown mode), and a dark theme with higher contrast but a relatively limited spectrum for 
writing code. But let's start by seeing if I can get a light theme to even show up on my dark 
terminal on ipad.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes 
  :ensure t
  :config
    (load-theme 'doom-acario-light t)) 

#+END_SRC

Well, that's interesting. It seems to load the theme, but it doesn't get the background right. 
There's a light background, but it isn't blue like it is in the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots#doom-acario-light][screenshot]]. 

I wonder if it's blue in GUI.  Is there some kind of pair of flags, one that says light or dark, 
and works in terminal, and another that says a specific color and works only in GUI?  Well, 
at any rate, this is a lot nicer for now so I'll run with it, and maybe go see how it looks on my 
computer in a bit.

Well, even more oddly, the colors in iterm are a muted version of the colors on ipad.  That's a little wacky.  
It's not horrible, so, once again, I'm not going to bother to fix it. But, lordy. 

UPDATE: apparently doom themes is clobbering counsel how.  who the fuck knows.

*** DONE fix parens highlighting in this theme.  It kind of sucks.

** I never even use the menu bar in GUI

kill it with fire.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC


** Rainbow parens

Can't even begin to edit elisp without this, I want it in this mode noooow.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'org-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC


** Modeline colors

#+BEGIN_SRC emacs-lisp
(setq evil-normal-state-tag   (propertize "N" 'face '((:background "green" :foreground "black")))
      evil-emacs-state-tag    (propertize "E" 'face '((:background "orange" :foreground "black")))
      evil-insert-state-tag   (propertize "I" 'face '((:background "red")))
      evil-motion-state-tag   (propertize "M" 'face '((:background "blue")))
      evil-visual-state-tag   (propertize "V" 'face '((:background "grey80" :foreground "black")))
      evil-operator-state-tag (propertize "O" 'face '((:background "purple"))))
#+END_SRC



* Keybindings

** Bust out General

I think I pretty much just only want these keybindings in normal mode for now.

#+BEGIN_SRC emacs-lisp
(use-package general
)

(defconst leader "SPC")
(defconst mode-leader ",")
(general-create-definer leader-binding
  :prefix leader
  :states 'normal
  :keymaps 'override) 

(general-create-definer mode-binding
  :prefix mode-leader
  :states 'normal
  :keymaps 'override)

#+END_SRC

** Global leader keybindings 


GLOBAL KEYBINDINGS FROM LEADER KEY 

| command | function              |
| f f     | find file             |
| f s     | save file             |
| f n     | save to new name      |
| w /     | new window to right   |
| w -     | new window below      |
| w d     | delete current window |
| w x     | delete other windows  |
| w c     | cycle to next window  |
| b d     | kill buffer           |
| b b     | buffer menu           |


*** Files

tryna swipe the bindings I use most often in spacemacs

#+BEGIN_SRC emacs-lisp

(leader-binding
"f" '(:ignore t :which-key "Files")
"ff" 'counsel-find-file
"fs" 'save-buffer
"fn" 'write-file)

#+END_SRC

*** Buffers


#+BEGIN_SRC emacs-lisp

(leader-binding
"b" '(:ignore t :which-key "Buffers")
"bd" 'kill-this-buffer
"bb" 'ivy-switch-buffer)

#+END_SRC

*** Windows


#+BEGIN_SRC emacs-lisp

(leader-binding
"w" '(:ignore t :which-key "Windows")
"w/" 'split-window-right
"w-" 'split-window-below
"wd" 'delete-window
"wx" 'delete-other-windows
"wc" 'other-window)

#+END_SRC

** Mode-specific leader keybindings

*** Org mode

**** Ergonomic header and todo cycling                                  :key:

ORG MODE, NORMAL: 

| command | function     |
|---------+--------------|
| , t     | cycle todo   |
| , f     | cycle header |
|         |              |


#+BEGIN_SRC emacs-lisp

(mode-binding 
:keymaps 'org-mode-map
"t" 'org-todo
"f" 'org-cycle )

#+END_SRC



* Development (of emacs config) conveniences   :dev: 


** Keybinding to make delimiter for elisp blocks with @         

This is slightly black-magic-ey.  add-lisp-delimiters is defined in init.el. 
That function looks for a variable called in-config-file, and, if it's set 
(as it is on the very first line of this file... and apparently it has to be the very 
first line, the second line won't do), then it pastes in the BEGIN_SRC stuff. So I bind it to ampersand, 
because I don't *think* anything else uses @ ...?



#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 
  (lambda () 
    (evil-global-set-key 'normal (kbd "@") 'add-lisp-delimiters)))

#+END_SRC



* TODO problems to fix
** TODO typing "emacs readme.org" on the command line opens in a scratch buffer, not the file.

it works when I use iterm over macos but not when I use blink over ios?!  WTF?? How is that even possible?

** DONE it dials out to MELPA on every start, even if there's no new packages to load.   

Maybe this has to do with package-refresh-contents? see: https://github.com/jwiegley/use-package/issues/494
The answer here https://stackoverflow.com/questions/24280325/emacs-use-package-and-package-refresh-contents 
might be the solution to sorting out when to call package-refresh-contents?

I'm starting by just commenting out the call to package-refresh-contents in the melpa setup. That works!  Yay! 

** DONE I don't seem to have a meta key on the ipad keyboard?
Something in here might be a fix. https://github.com/blinksh/blink/issues/198 

It appears that turning on the software keyboard on blink fixes that.  but...

** DONE I also don't have a meta key on the mac keyboard

possible fixes?  https://www.emacswiki.org/emacs/MetaKeyProblems#toc1
I want the fn key to be meta on the mac.  I have other uses for option

For some bizarre reason, in iterm, the setting to remap an option key to meta at least isn't on the *keys* 
tab it's on the *profile* tab, then under the keys subtab there, way at the bottom.  Wow iterm. Wow. 

But maybe I can give it the right option key for meta now. 
Meh, doesn't seem to work.  Apparently "esc-plus" is the thing to set it to. But that breaks evil, because 
esc is how one gets to normal mode.  I guess I could figure out how to change that, and, dunno, 
give it to caps lock or something.

actually, the esc-plus setting seems to work on evil without breaking my normal escape.  I dunno how 
it manages to overload escape, but whev. 



* TODO enhancements to make
** Different cursor for normal vs insert or modeline or *something*
   Apparently this is a thing that doesn't work in terminal out of the box but does work in GUI. 
There is a [[https://github.com/7696122/evil-terminal-cursor-changer#change-log][package]] to force it. But it doesn't seem to work.  I at least want a damn modeline signal.

For modeline [[https://www.emacswiki.org/emacs/Evil#toc19][here is some code worth trying]]. but [[https://github.com/emacs-evil/evil/issues/366#issuecomment-273751024][this code]] looks simpler.  I'll try the latter first.
(That works, but only colors the background of the single character. How to color the entire modeline, I wonder?)

I could also try [[https://github.com/seagle0128/doom-modeline][doom-modeline]]. 
** Stuff to steal from spacemacs
*** DONE Leader key
**** DONE command browsing from leader key
*** DONE file browsing and completion in project

** minor keybinding tweaks
     - [[https://emacs.stackexchange.com/a/13770/12604][swipe this]] and map it to escape to allow me to bail from any command in normal mode
     - bind the arrow keys to paging in which-keys (so sue me, I like arrow keys)
** editing tweaks
   - word wraps --- I could just set (global-visual-line-mode 1) but I wonder if I want it mode specific?
** some kind of non-utf-8 utility
   actually, I really want something that will highlight (a) non utf-8 characters, and (b) characters that look like normal ascii characters but aren't.
   - this might be ok just for markdown mode. the point is for copy-paste quotes that introduce shit characters that blow up latex
* TODO Checklist for moving to prod
** TODO Language support
   this is the list of languages that I must have functioning before I'm even going to consider moving off 
   spacemacs.  Not the nice-to-have languages.
   only languages with actual projects that I might want to edit in the near future (so no haskell, go, etc.)
   and leaving off languages with perfectly good alternative editors (swift, r)
*** TODO Markdown
Not technically mandatory since I have lots of alternative editors, but since part of the point of this project
is wanting to be able to use emacs for markdown and I hate spacemacs markdown layer, let's do it.
**** TODO spell check
*** TODO Python
**** TODO indentations handled sensibly
This means
- MANDATORY: being able to open a file created in another editor without shitting all over the intentation
- some kind of structural editing thing where I can paste a block in another block and have it be right?
- keybinding for [[https://emacs.stackexchange.com/questions/45774/confusion-about-space-and-tab-characters-in-emacs#:~:text=To%20make%20tabs%20and%20spaces,with%20both%20tabs%20and%20spaces][whitespace mode]] so at a minimum I can see and fix by hand indentation fuckups
*** TODO Javascript
*** TODO HTML
*** TODO Vue.js
*** TODO Clojure
*** TODO shell scripts
*** TODO makefiles
*** TODO JSON
*** TODO YAML
** TODO completions for all programming languages
** TODO undo-redo like spacemacs
** TODO window management
      - leader-key-style keybindings to close and open new windows
      - some kind of clone of spacemacs golden ratio mode

* inspo

[[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][this person]] [[https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/][also]].
[[https://jamiecollinson.com/blog/my-emacs-config/#][this setup]]
