# -*- in-config-file: t; lexical-binding: t  -*-


* Wth?

I'm now running this emacs config on my mac!  I've escaped spacemacs!  Even though 
it's not done yet, it's functional enough that I can use it, and I got sick of worrying about what kinds 
of things would have to be changed after moving machines.

doing the literate org config, so this readme file is also my config file!  (Well, most of it.  I 
defined a little bit of stuff that applies to this file itself, like a snippet to get elisp code blocks 
that I didn't know how to escape, in init.el.)  So that's cool.


** Conventions

   - I use the tag *dev* for headlines that contain code that might go away when I'm happy with this config, like the snippet I bound to @ below.

   - I use the tag *key* for headlines that contain code with a keybinding in it.  This is for ease of later documentation.
     - At some point I want to create a personal usage manual.

   - I use the tag *fragile* for headlines containing code with non-obvious or even downright mysterious failure potential, where I made it work with pure guesswork.

   - As much as possible, I try to keep keybindings together rather than with their associated packages.  This might be a mistake?


Keybindings are now listed in keybindings.org in this repository



* Package management

[[https://github.com/raxod502/straight.el][Straight]] appears to be an /actual package manager/ unlike stuff like use-package.  I can get a lockfile with commit hashes for every package I use with ~(straight-freeze-versions)~ . 

Given that emacs packages seem to just /love/ generating side effects, this seems like a thing that is absolutely mandatory. I've already had one nasty package conflict scare.

#+BEGIN_SRC emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+END_SRC


* Make things involving the commandline work on mac.

#+BEGIN_SRC emacs-lisp

(straight-use-package 'exec-path-from-shell)
(exec-path-from-shell-initialize)

#+END_SRC

Make use of the trash can before I start trying to use things like dired
UNTESTED
#+BEGIN_SRC emacs-lisp

(straight-use-package 'osx-trash)
(when (eq system-type 'darwin)
  (osx-trash-setup))
(setq delete-by-moving-to-trash t)

#+END_SRC


* Emacs mechanical tweaks

Kill all the damn beeping

#+BEGIN_SRC emacs-lisp

(setq visible-bell 1)

#+END_SRC

Also kill all the annoying confirmations.  Borrowed from [[https://www.masteringemacs.org/article/disabling-prompts-emacs][here]]. 

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

(setq confirm-nonexistent-file-or-buffer nil)

(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC

Get my mac keys back. From [[https://gist.github.com/railwaycat/3498096][here]]  This is a consequence of switching from emacs-plus to emacs-macport

For some reason, it needs to be called twice to get it to work. But calling it twice does work, so.

#+BEGIN_SRC emacs-lisp
(global-set-key [(hyper a)] 'mark-whole-buffer)
(global-set-key [(hyper v)] 'yank)
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper x)] 'kill-region)
(global-set-key [(hyper s)] 'save-buffer)
(global-set-key [(hyper l)] 'goto-line)
(global-set-key [(hyper w)]
                (lambda () (interactive) (delete-window)))
(global-set-key [(hyper z)] 'undo)

(defun mac-switch-meta () 
  "switch meta between Option and Command"
  (interactive)
  (if (eq mac-option-modifier nil)
      (progn
	(setq mac-option-modifier 'meta)
	(setq mac-command-modifier 'hyper)
	)
    (progn 
      (setq mac-option-modifier nil)
      (setq mac-command-modifier 'meta)
      )
    )
  )

(mac-switch-meta)
(mac-switch-meta)

#+END_SRC

I'm over the backup files. Borrowing code from [[https://www.emacswiki.org/emacs/BackupDirectory][the wiki]] 

#+BEGIN_SRC emacs-lisp
(defvar backup-dir "~/Dropbox/emacs-backup-files")
    (setq backup-directory-alist
          `((".*" . ,backup-dir)))
    (setq auto-save-file-name-transforms
          `((".*" ,backup-dir t)))

#+END_SRC

Let's see if I can get a restart in

#+BEGIN_SRC emacs-lisp
(straight-use-package 'restart-emacs)

#+END_SRC

Getting sick of having a window with the welcome message show up when I open something from the commandline 

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

I don't need these libs until I get to origami in markdown mode in an entire separate config file, but they're generally useful enough that I'd rather load them up right on top.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'dash)
  (straight-use-package 's)
#+END_SRC

Everything is UTF-8.  EVERYTHING. Borrowed from [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][here.]]  

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

Maybe a bit more help 

#+BEGIN_SRC emacs-lisp
(straight-use-package 'helpful)
(setq counsel-describe-function-function #'helpful-callable)
(setq counsel-describe-variable-function #'helpful-variable)
#+END_SRC

helpful-variable seems to fail randomly when point is at the wrong place in a buffer,
might want to switch back to built-in describe-variable. See[[https://github.com/Wilfred/helpful/issues/251][this issue.]] 


I also want a global editing setting to overwrite when I select, because 
that's the functionality I'm used to. 

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC


** Undo-redo 

Undo-redo is impossibly confusing and I can never redo anything and I hate it to death.  Let's try a lib.
Using [[https://gitlab.com/ideasman42/emacs-undo-fu][undo-fu]] because it seems normal.  keybindings down below per usual, but also suggested keybindings [[https://gitlab.com/ideasman42/emacs-undo-fu][in here]] for evil.

(actually I take that back.  I'm going to define them down below in general, but I'm going to use C-u and C-r for it globally, including in insert mode, because fuck that noise.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'undo-fu)
#+END_SRC

While I'm here, I also want to fix evil undo some more.  These are [[https://evil.readthedocs.io/en/latest/settings.html][apparently supposed to happen before evil is loaded]]. 

#+BEGIN_SRC emacs-lisp

(setq evil-undo-system 'undo-fu)


(setq evil-want-fine-undo t)
#+END_SRC



* Frivolity

turning off the nyan cat screensaver reluctantly because it seems
to leave the region in a weird place and I don't trust it, when 
I'm randomly getting copy-paste-search-undo quirks.

#+BEGIN_SRC emacs-lisp
  ;; (straight-use-package 'zone-nyan)
  ;; (require 'zone)
  ;; (setq zone-programs [zone-nyan])
  ;; (zone-when-idle 1200)
#+END_SRC


* Browsing and Finding Things 

** Files and such  

Spacemacs uses helm, but lots of people who start with helm seem to love Ivy

#+BEGIN_SRC emacs-lisp
(straight-use-package 'counsel)
(ivy-mode 1)
#+END_SRC


I think projectile will be useful for things like project-wide find

#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
(require 'projectile)
(projectile-mode +1)
(setq projectile-completion-system 'ivy)
#+END_SRC


Ivy rich looks nice in the screenshots on the repo.  But does it do anything?  I don't see a difference, but let's see. 

#+BEGIN_SRC emacs-lisp

(straight-use-package 'ivy-rich)
(require 'ivy-rich)
(ivy-rich-mode 1)
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

#+END_SRC


** Commands

Which-key is apparently The Thing 

#+BEGIN_SRC emacs-lisp
(straight-use-package 'which-key)
(require 'which-key)
(which-key-mode)
#+END_SRC


** Characters

#+BEGIN_SRC emacs-lisp
(straight-use-package 'avy)
(require 'avy)
(straight-use-package 'avy-menu)
(require 'avy-menu)

(setq avy-keys (nconc 
                      (number-sequence ?1 ?9)
                      '(?0)
                      (number-sequence ?a ?z)
))
(setq avy-background t)
(setq avy-style 'pre)
#+END_SRC


* Evilify everything because emacs keybindings are horrible

** Base evil 

#+BEGIN_SRC emacs-lisp

(straight-use-package 'evil)
(setq evil-want-keybinding nil)  ;; this is apparently required for evil-collection keybindings.
(require 'evil)
(evil-mode)

#+END_SRC


I'm having weird glitches with changes disappearing in big markdown buffers, and I'm wondering if that has something to do with evil. So this is an experiment.

#+BEGIN_SRC emacs-lisp
(fset 'evil-visual-update-x-selection 'ignore) 
#+END_SRC



** Add more evil bindings
Let's get as much evilified as humanly possible just to start, eh?

#+BEGIN_SRC emacs-lisp

(straight-use-package 'evil-commentary)
(require 'evil-commentary)
(evil-commentary-mode)

(straight-use-package 'evil-collection)

(straight-use-package 'evil-org)
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

#+END_SRC

I have keybindings for this down below, but I need a universal bail out of things command.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'evil-escape)
#+END_SRC

I wish I knew how the parsing/evaluation order of these files worked. Can I set a keybinding for something before actually using it? 
I feel like I've seen people actually call functions before defining them in blog posts and such about elisp. 


* Make startup useful

#+BEGIN_SRC emacs-lisp

(straight-use-package 'dashboard)
(require 'dashboard)
(dashboard-setup-startup-hook)

(setq dashboard-set-init-info t)
(setq dashboard-set-footer nil)
(setq dashboard-projects-backend 'projectile)

(setq dashboard-items '((recents  . 5)
                        (projects . 5)
                        (bookmarks . 5)
                        (registers . 5)))

(evil-collection-init 'dashboard)

#+END_SRC



* Misc utility functions

Find non-ascii text (swiped from [[https://www.emacswiki.org/emacs/FindingNonAsciiCharacters][the wiki]])

#+BEGIN_SRC emacs-lisp

(defun find-non-ascii ()
  "Find any non-ascii characters in the current buffer."
  (interactive)
  (occur "[^[:ascii:]]"))

#+END_SRC



* Machine-specific config

I'm using this emacs config across work and home machines, but some stuff is different. Particularly, I only use dropbox on my home machine, 
and use onedrive for work things; configuration that requires saving to a dropbox file should only happen on a personal computer. 

Right now, I'm just setting up environment variable to get a machine identifier.  Will create machine-specific config down the line. 

I really want to use an enum for this, but right now it's just a string. So permissible values are "home-computer" and "office-computer)

#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-copy-env "WHICH_COMPUTER")
(defvar which-computer)

(setq which-computer (getenv "WHICH_COMPUTER"))

; just to make sure I can detect computer

(defun say-computer ()
(interactive)
(cond ((string= which-computer "home-computer") (print "I'm the home computer!"))
      ((string= which-computer "office-computer") (print "I'm the office computer!"))
      (t (print "I don't know which computer I am. :-(")))
)


#+END_SRC


* Visual 
  
** Theme


Setup

#+BEGIN_SRC emacs-lisp
(straight-use-package 'leuven-theme)

#+END_SRC

Convenience functions

#+BEGIN_SRC emacs-lisp
  (defvar dark-theme 'leuven-dark)
  (defvar light-theme 'leuven)

  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defun dark-mode ()
  (interactive)
  (disable-all-themes)
  (load-theme dark-theme t))


  (defun light-mode ()
  (interactive)
  (disable-all-themes)
  (load-theme light-theme t))
#+END_SRC


Dark mode for programming 

I'm not going to use prog-mode-hook on this because it seems to fire it off on org?  but I want org to be light...

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'dark-mode)
#+END_SRC

Light mode for writing

gonna fire this up for markdown mode too.  Maybe it would make sense to define a writing mode hook encompassing org mode and markdown mode?

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'light-mode)
#+END_SRC

This doesn't seem to work perfectly: if I start in an org buffer then open the python buffer, the hook fires and I go dark.  but then if I close the python buffer even though the 
org mode buffer is back on the screen it doesn't go light again.  It does go light if I close the org buffer and reopen it though.  Hmm.  For now I think I'll just toss in a quick keybinding to fix it. 

Start out in light mode

#+BEGIN_SRC emacs-lisp
(light-mode)
#+END_SRC


** Font

#+BEGIN_SRC emacs-lisp

(defvar code-font-string "Inconsolata Light 18")
(defvar prose-font-string "IBM Plex Serif 16")

(defun code-font () 
(interactive)
(set-frame-font code-font-string nil t))

(defun prose-font () 
(interactive)
(set-frame-font prose-font-string nil t))

(code-font)


#+END_SRC

A quick fix for org.

#+BEGIN_SRC emacs-lisp
(setq org-fontify-whole-heading-line t)
#+END_SRC


** GUI tweaks

Get rid of menubar, toolbar, scrollbar


#+BEGIN_SRC emacs-lisp

(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC

Start full-sized

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

Make clicking in margins bring point to visual line.  

#+BEGIN_SRC emacs-lisp

  (defun set-point-to-margin-click (event) 
    (interactive "e")
    (let ((position (cddr (mouse-position)))
         (clicked-window (posn-window (event-start event))))
      (select-window clicked-window)
      (let ((topline (car (cdr (window-body-edges)))))
        (move-to-window-line 0)
        (line-move-visual (- position topline)))))
      
	(global-set-key (kbd "<left-margin> <mouse-1>") 'set-point-to-margin-click)
	(global-set-key (kbd "<right-margin> <mouse-1>") 'set-point-to-margin-click)

#+END_SRC

Let's get scrolling working in the margins too. I think this might be specific to the macport build I'm using; may break on office computer.

If it breaks on office computer, I can just try mwheel-scroll without the modifier. 

#+BEGIN_SRC emacs-lisp


  (global-set-key (kbd "<left-margin> <wheel-down>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<left-margin> <wheel-up>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<left-margin> <wheel-left>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<left-margin> <wheel-right>") 'mac-mwheel-scroll)

  (global-set-key (kbd "<right-margin> <wheel-down>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<right-margin> <wheel-up>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<right-margin> <wheel-left>") 'mac-mwheel-scroll)
  (global-set-key (kbd "<right-margin> <wheel-right>") 'mac-mwheel-scroll)

#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
(straight-use-package 'linum-relative)
(require 'linum-relative)
(setq linum-relative-backend 'display-line-numbers-mode)
#+END_SRC


** Rainbow parens

Can't even begin to edit elisp without this, I want it in this mode noooow.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'rainbow-delimiters)
(add-hook 'org-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC


** Modeline


#+BEGIN_SRC emacs-lisp

(straight-use-package 'telephone-line)
(straight-use-package 'nyan-mode)
(require 'nyan-mode)
(nyan-mode)

(setq telephone-line-lhs
      '((evil   . (telephone-line-airline-position-segment
                   telephone-line-evil-tag-segment
                   telephone-line-vc-segment
                   telephone-line-process-segment
                   telephone-line-buffer-segment
                   telephone-line-buffer-modified-segment))
(nil . (telephone-line-nyan-segment))
))
(setq telephone-line-rhs
      '(
;(nil . (telephone-line-nyan-segment))
(evil    . (telephone-line-major-mode-segment)
)))

(telephone-line-mode 1)

#+END_SRC






** Golden ratio

I've decided this should be off by default.  It's useful but also annoying.  I'll bind it to a key. 

#+BEGIN_SRC emacs-lisp
(straight-use-package 'golden-ratio)
(require 'golden-ratio)
; (golden-ratio-mode 1)
#+END_SRC



* Git
#+BEGIN_SRC emacs-lisp

(straight-use-package 'magit)

(evil-collection-init 'magit)
#+END_SRC

Trying to create the equivalent of ~git add .~ --- the function ~magit-stage-modified~ is close, but appears to require a prefix argument to make it work.

Following the suggestion in [[https://stackoverflow.com/a/6156444/4386239][this SO]] I'm going to just try to force that in. 

Actually, it looks like I don't need to do all that jazz with forced prefix arguments and ~call-interactively~ --- I can just pass it a value.  For now?  Is this
 a bug/undocumented behavior or do I just not understand the function definition?  Is there a way to get emacs to give you the code for a function?

I can probably get rid of that current prefix arg thing.  but this works now, so, why?  


#+BEGIN_SRC emacs-lisp
(defun git-add-all ()
  (interactive)
  (let ((current-prefix-arg '(4)))
  (magit-stage-modified "t")))

#+END_SRC

Ok, now let's see if I can get a straight-up commit going. 

#+BEGIN_SRC emacs-lisp

(defun git-quick-commit ()
(interactive)
(git-add-all)
(magit-commit-create))

#+END_SRC


I'd like to be able to pull; setting global auto-revert mode to avoid pain like pulling open buffers, which would be a bad oops.  

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC


* General Programming 


Completions

#+BEGIN_SRC emacs-lisp
(straight-use-package 'company)
(add-hook 'prog-mode-hook 'company-mode)
(straight-use-package 'company-quickhelp)
(add-hook 'prog-mode-hook 'company-quickhelp-mode)
#+END_SRC

Line numbers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
; (setq linum-format "%4d \u2502 ")
#+END_SRC

Get rid of visual line mode just in case I switched in from markdown.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (visual-line-mode -1)))
#+END_SRC

Make sure code is in a proper code font 

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook `code-font)
#+END_SRC

Time to take control of my parens. 

evil cleverparens doesn't appear to work though, at least not in this file. It still lets me delete 


#+BEGIN_SRC emacs-lisp

    (straight-use-package 'smartparens)
    (straight-use-package 'evil-cleverparens)
    (add-hook 'smartparens-enabled-hook #'evil-cleverparens-mode)
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook #'smartparens-mode)
    
  ; just to make it easier to work on lisp
    (sp-pair "'" "'" :actions :rem)

#+END_SRC

While I'm at it, it's silly not to have parens matched instantly.

#+BEGIN_SRC emacs-lisp

(setq show-paren-delay 0)
(show-paren-mode 1)

#+END_SRC

Syntax checking

#+BEGIN_SRC emacs-lisp
(straight-use-package 'flycheck)
(add-hook 'prog-mode-hook #'global-flycheck-mode)
#+END_SRC

installed on my system: 
pylint (python, via ~pip install pylint~)
eslint (js, via ~npm install -g eslint~)
html-tidy (html, via ~brew install tidy-html5~)
jq (json, via ~brew install jq~)
shellcheck (bash, via ~brew install shellcheck~)
yamllint (yaml, via ~pip install yamllint~)
stylelint (css, via ~npm install -g stylelint stylelint-config-standard~)

* Python

Moved to its own file.

#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/python/python.org")
#+END_SRC




* Org

I want to be able to use shift select.

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC

I HATE org's link hiding. HATE IT.  It makes it impossible to edit links.  Die die die die.

#+BEGIN_SRC emacs-lisp
(setq org-descriptive-links nil)
#+END_SRC

Setting up org capture in a separate file in order to make it visually easier to just change as I change projects.  This is going to shift a lot.

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/.emacs.d/org/capture.org")
#+END_SRC

experimental: org roam

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/.emacs.d/org/roam.org")
#+END_SRC


* Markdown


Moved to its own file

#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/markdown/markdown-main.org")
#+END_SRC



* JSON

I'm going to start making use of JQ to try to work with some citeproc-json goodness.  right now it's just here for testing.

#+BEGIN_SRC emacs-lisp

(straight-use-package 'counsel-jq)

#+END_SRC

* Visual changes between writing and programming

#+BEGIN_SRC emacs-lisp

(defun text-margins ()
  (setq left-margin-width 16)
  (setq right-margin-width 16))
(add-hook 'markdown-mode-hook 'text-margins)

(defun prog-margins ()
  (setq left-margin-width 2)
  (setq right-margin-width 2))
(add-hook 'prog-mode-hook 'prog-margins)

(defun text-linespacing ()
  (setq line-spacing 0.5))
(add-hook 'markdown-mode-hook 'text-linespacing)

(defun prog-linespacing ()
  (setq line-spacing nil))
(add-hook 'prog-mode-hook 'prog-linespacing)

#+END_SRC



* Data serialization languages

** Yaml

#+BEGIN_SRC emacs-lisp
(straight-use-package 'yaml-mode)

(add-hook 'yaml-mode-hook #'global-flycheck-mode)

#+END_SRC

* Keybindings


Set up evil escape

#+BEGIN_SRC emacs-lisp
(evil-escape-mode)
(setq-default evil-escape-delay 0.2)
(global-set-key (kbd "ESC ESC") 'evil-escape)
#+END_SRC


Load up general


#+BEGIN_SRC emacs-lisp
(straight-use-package 'general)

(defconst leader "SPC")
(defconst mode-leader ",")
(general-create-definer leader-binding
  :prefix leader
  :states 'normal
  :keymaps 'override) 

(general-create-definer mode-binding
  :prefix mode-leader
  :states 'normal
  :keymaps 'override)

#+END_SRC

Load up keybindings file 

#+BEGIN_SRC emacs-lisp

(org-babel-load-file "~/.emacs.d/keybindings.org")

#+END_SRC


* Development (of emacs config) conveniences   :dev: 


** Keybinding to make delimiter for elisp blocks with @         

This is slightly black-magic-ey.  add-lisp-delimiters is defined in init.el. 
That function looks for a variable called in-config-file, and, if it's set 
(as it is on the very first line of this file... and apparently it has to be the very 
first line, the second line won't do), then it pastes in the BEGIN_SRC stuff. So I bind it to ampersand, 
because I don't *think* anything else uses @ ...?



#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 
  (lambda () 
    (evil-global-set-key 'normal (kbd "@") 'add-lisp-delimiters)))

#+END_SRC








* TODO enhancements to make
** Fancier modeline with mode and git enhancements
   - I'm happy with [[https://github.com/dbordak/telephone-line/][telephone-line]] for now, except I'd like to be able to have three color chunks, one reflecting mode, 1 reflecting file save status, and 1 reflecting git status.
** minor keybinding tweaks
     - bind the arrow keys to paging in which-keys (so sue me, I like arrow keys)
** some kind of non-utf-8 utility
   actually, I really want something that will highlight (a) non utf-8 characters, and (b) characters that look like normal ascii characters but aren't.
   - this might be ok just for markdown mode. the point is for copy-paste quotes that introduce shit characters that blow up latex
** swipe-scrolling on the touchpad like with vim
** Language support
*** Javascript
*** HTML
*** Vue.js
*** Clojure
*** shell scripts
*** makefiles
*** JSON
*** YAML
** better undo-redo 
   - maybe try [[https://gitlab.com/ideasman42/emacs-undo-fu][this lib?]]
** window management
      - some way to pin a buffer to a window, so that I can close the window and reopen w/ same buffer there.

** hotkey to reload this config file like spacemacs has
** Markdown enhancements
   - word count in the modeline that just treats markdown punctuation as spaces
   - some way to hide or dimish in-line footnotes.
   - a nice UI to query a CSL json for citations (built on ivy?)
   - highlight and overwrite
** org enhancements
   - fix the weird thing where these internal lists don't tab-indent to same spot
   - MORE KEYBINDINGS for stuff I actually use.


* inspo

[[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][this person]] [[https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/][also]].
[[https://jamiecollinson.com/blog/my-emacs-config/#][this setup]]
[[https://so.nwalsh.com/2020/02/29/dot-emacs%20][this person has a million perf tweaks]]

