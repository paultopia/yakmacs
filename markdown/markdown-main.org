# -*- in-config-file: t; lexical-binding: t  -*-

* Markdown config

Load up markdown

#+BEGIN_SRC emacs-lisp
(straight-use-package 'markdown-mode)
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

(setq markdown-command
      (concat
       "/usr/local/bin/pandoc"
       " --from=markdown --to=html"
       " --standalone --mathjax --highlight-style=pygments"))

#+END_SRC

I don't like trailing hashes

#+BEGIN_SRC emacs-lisp
(setq markdown-asymmetric-header t)
#+END_SRC

De-uglify the line breaks and such.  Also, light mode, visual line mode, wide margins, and rainbow parens for the footnotes and references

#+BEGIN_SRC emacs-lisp

(defun turn-off-fringe () 
(fringe-mode 0))


(add-hook 'markdown-mode-hook 'light-mode)
; (add-hook 'markdown-mode-hook 'turn-off-fringe)

(add-hook 'markdown-mode-hook 'prose-font)

(defun text-margins ()
  (setq left-margin-width 16)
  (setq right-margin-width 16))
(add-hook 'text-mode-hook 'text-margins)

(add-hook 'markdown-mode-hook #'rainbow-delimiters-mode)

#+END_SRC

Make flyspell ignore words starting with ampersand (pandoc citation refs)

#+BEGIN_SRC emacs-lisp


  (defun is-ampersand (s)
  (string= "@" s))

  (defun not-cite ()
   (save-excursion
    (forward-word -1)
    (let ((result (is-ampersand (string (preceding-char)))))
     (not result))))

(defun not-cite-advice (orig &rest args)
(if (not-cite)
(apply orig args)))

  (advice-add 'markdown-flyspell-check-word-p :around #'not-cite-advice)
#+END_SRC

Set up flyspell

#+BEGIN_SRC emacs-lisp
(straight-use-package 'flyspell-correct)
(straight-use-package 'flyspell-correct-avy-menu)
(require 'flyspell-correct)
(require 'flyspell-correct-avy-menu)

(defun correct-all-spelling ()
  (interactive)
  (let ((current-prefix-arg '(4)))
  (call-interactively 'flyspell-correct-wrapper)))

(defun correct-marked-spelling-errors ()
(interactive)
(save-excursion
 (end-of-buffer)
 (correct-all-spelling)))

(defun full-spellcheck ()
(interactive)
(flyspell-buffer)
(save-excursion
 (end-of-buffer)
 (correct-all-spelling)))


#+END_SRC

Make it possible to hide footnotes

#+BEGIN_SRC emacs-lisp

 (straight-use-package 'origami)
 (require 'origami)

 (add-to-list 'origami-parser-alist `(markdown-mode . ,(origami-markers-parser "[" "]")))

(add-hook 'markdown-mode-hook 'origami-mode)

#+END_SRC

Helper functions to add parent and child headings

#+BEGIN_SRC emacs-lisp

(defun pg-add-parent-header ()
(interactive)
(let ((current-prefix-arg '(4)))
(call-interactively 'markdown-insert-header-dwim)))

(defun pg-add-child-header ()
(interactive)
(let ((current-prefix-arg '(16)))
(call-interactively 'markdown-insert-header-dwim)))

#+END_SRC

** Some pandoc-related functionality

A quick helper function to reduce code repetition for a bunch of pandoc commands
   
#+BEGIN_SRC emacs-lisp

(defun pandoc-to-file (filename defaults)
  (shell-command-on-region (point-min) (point-max)
   (format "pandoc -o %s --defaults=%s" filename defaults))
)

(defun insert-at-start (metadata)
(save-excursion
  (goto-char (point-min))
  (insert metadata))
)

#+END_SRC
   
Letterhead
   
#+BEGIN_SRC emacs-lisp

  (setq letterhead-default-address-block 
  "---
  address:
  - 123 Street Rd
  - Unit Placeville2d
  - Chicago, IL
  recipient: \"Dude or Dudette\"
  subject: \"Please send me money.\"
  shortletter: true
  ---

  ")

  (defun add-letterhead-address-block ()
  (interactive)
  (insert-at-start letterhead-default-address-block))

  (defun pandoc-make-letterhead-from-buffer (filename)
  (interactive "FOutput File: ")
  (pandoc-to-file filename "letterhead")
  (find-file filename)
  )

#+END_SRC

More pandoc commands: basic and research, with output simply defined by filename.

#+BEGIN_SRC emacs-lisp

(defun dateline ()
  (calendar-date-string (calendar-current-date) nil t))

(defun pandoc-default-metadata-block () 
(format 
"---
title: \"Here is a title\"
author: Paul Gowder
bibliography: foo.json
date: %s
---

" (dateline)))

  (defun add-default-pandoc-block ()
  (interactive)
  (insert-at-start (pandoc-default-metadata-block)))


(defun pandoc-base (filename)
  (interactive "FOutput File: ")
  (pandoc-to-file filename "base")
)

(defun pandoc-research (filename)
  (interactive "FOutput File: ")
  (pandoc-to-file filename "research")
)

(defun pandoc-bluebook (filename)
  (interactive "FOutput File: ")
  (pandoc-to-file filename "bluebook")
)

#+END_SRC
